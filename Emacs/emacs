;; melpa repo for packages
(require 'package)
(require 'use-package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(require 'use-package)
(setq use-package-always-ensure t)

;; multiple cursors!
(use-package multiple-cursors)

;; git management 
(use-package magit)

;; HELM
(use-package helm)

;;Keep packages up to date
(use-package auto-package-update)
(auto-package-update-maybe)

;; remove bars and welcome screen
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
;;(setq inhibit-startup-screen t)

;; auto launch latex preview pane
(use-package latex-preview-pane)
(latex-preview-pane-enable)

;; always use correct indentation
(use-package aggressive-indent)
(global-aggressive-indent-mode 1)

;; better startup menu
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq dashboard-center-content t)
(setq dashboard-startup-banner 'logo)
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

;; hyperlinks in editor
(use-package hyperbole)
(hyperbole-mode 1)

;; Display valid key combos in realtime
(use-package which-key)
(which-key-mode)

;; Hide ^M DOS line endings
(defun remove-dos-eol ()
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

;; use custom eshell file instead of shell
;; DISABLED (setenv "ESHELL" (expand-file-name "~/.eshell"))

;; Bind undo to Control Z
(global-unset-key "\C-z")
(global-set-key "\C-z" 'advertised-undo)

;; adds number lines
(global-display-line-numbers-mode)

;; autocomplete ui
(use-package company)
(add-hook 'after-init-hook 'global-company-mode)

;; nyan cat line bar
(use-package nyan-mode)
(define-globalized-minor-mode my-global-nyan-mode nyan-mode
  (lambda () (nyan-mode 1)))
(my-global-nyan-mode 1)

;; vim bindings for text editing
(use-package evil)
(evil-mode 1)

;; tree gui (toggle with f8)
(use-package treemacs)
(global-set-key [f8] 'treemacs)

;; C and C++ language server
(use-package ccls)
(use-package ccls
  :ensure t
  :config
  (setq ccls-executable "ccls")
  (setq lsp-prefer-flymake nil)
  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  :hook ((c-mode c++-mode objc-mode) .
         (lambda () (require 'ccls) (lsp))))


;; Java language server
(use-package lsp-java)
(add-hook 'java-mode-hook #'lsp)

;; GDScript language server
(use-package gdscript-mode)

;; use dracula color scheme
(use-package dracula-theme)
(load-theme 'dracula t)

;; Spell Checking
(use-package flyspell-correct)
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)

;; Matlab integration
(use-package matlab-mode
  :ensure t
  :defer t
  :config (setq matlab-indent-function-body t)
  :commands (matlab-shell)
)

;; add pretty icons
(use-package all-the-icons
  :if (display-graphic-p))

;; ansi-term improvements
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(defun my-term-use-utf8 ()
  (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(add-hook 'term-exec-hook 'my-term-use-utf8)
(defun my-term-hook ()
  (goto-address-mode))
(add-hook 'term-mode-hook 'my-term-hook)
(defun my-term-paste (&optional string)
 (interactive)
 (process-send-string
  (get-buffer-process (current-buffer))
  (if string string (current-kill 0))))
(defun my-term-hook ()
  (goto-address-mode)
  (define-key term-raw-map "\C-y" 'my-term-paste))
(defun my-term-hook ()
  (goto-address-mode)
  (define-key term-raw-map "\C-y" 'my-term-paste)
  (let ((base03  "#002b36")
        (base02  "#073642")
        (base01  "#586e75")
        (base00  "#657b83")
        (base0   "#839496")
        (base1   "#93a1a1")
        (base2   "#eee8d5")
        (base3   "#fdf6e3")
        (yellow  "#f1fa8c")
        (orange  "#ffb86c")
        (red     "#ff5555")
        (magenta "#ff79c6")
        (violet  "#bd93f9")
        (blue    "#268bd2")
        (cyan    "#8be9fd")
        (green   "#50fa7b"))
    (setq ansi-term-color-vector
